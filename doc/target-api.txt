Target hierarchy
================

Service		org.neard
Interface	org.neard.Target
Object path	[variable prefix]/{nfc0}/{target0, target1...}

Method		dict GetProperties()

			Returns all properties for the device. See the
			properties section for available properties.

			Possible Errors: org.neard.Error.DoesNotExist

		void SetProperty(string name, variant value)

			Changes the value of the specified property. Only
			properties that are listed a read-write are changeable.
			On success this will emit a PropertyChanged signal.

			Possible Errors: org.neard.Error.DoesNotExist
					 org.neard.Error.InvalidArguments

Signals		PropertyChanged(string name, variant value)

			This signal indicates a changed value of the given
			property.

Properties	string Type [readonly]

			The NFC target type.

			Valid types are "tag" and "device".

		array{string} Protocols [readonly]

			The target supported protocols.
			Possible values are "Felica", "MIFARE", "Jewel",
			"ISO-DEP" and "NFC-DEP".

		array{string} TagType [readonly]

			The tag type.
			Possible values are "Type 1", "Type 2", "Type 3",
			"Type 4" and "NFC-DEP"
			This is only valid for tag type targets.

		array{object} Records [readwrite]

			List of NDEF records object paths.
			This is only valid for tag type targets.


Record hierarchy
================

Service		org.neard
Interface	org.neard.Record
Object path	[variable prefix]/{nfc0}/{target0}/{record0,record1,...}

Method		dict GetProperties()

			Returns all properties for the record. Each record
                        has it's type and properties.

                        If type has "Text", possible properties are "Encoding",
                        "Language" and "Representation".

                        See the properties section for available properties.

			Possible Errors: org.neard.Error.DoesNotExist

Properties	string Type [readonly]

			Type is ndef record type name.
			Possible values are "SmartPoster", "Text", "URI",
			"HandoverRequest", "HandoverSelect", "HandoverCarrier".
			Depends upon this type name dbus api user can filter
			other properties.

                string Encoding [readonly]

                       Can exist in Text and SmartPoster(Title) record. Encoding
                       is either "UTF-8" or "UTF-16".

                string Language [readonly]

                       Can exist in Text and SmartPoster(Title) record. ISO/IANA
                       language code.

                       Examples: "fi", "en-US", "fr-CA", "jp".

                string Representation [readonly]

                       Can exist in Text and SmartPoster(Title) record.
                       The actual text in record.

		string URI [readonly]

			Can exist in URI and SmartPoster record. Here URI
                        identifier is prefixed to URI field.

                        Example: If the content of URI identifier is 0x02, and
                        the content of the URI field reads as "nfc-forum.org",
                        the resulting URI is "https://www.nfc-forum.org"

		byte Action [readonly]

			Can exist in SmartPoster(Action) record. It suggests
                        a course of action that the device should do with the
                        content.

                        Example:
                                0 - Do the action.
                                1 - Save for later.
                                2 - Open for editing.

		uint32 Size [readonly]

			Can exist in SmartPoster(Size) record, which contains
                        the size of object that the URI field refers to. This
                        value may be used by the device to determine whether it
                        can accommodate the referenced file or not.

		string MIMEType [readinly]

			can exist in SmartPoster(Type) record. UTF-8 formatted
                        string that describes MIME type which describes the
                        type of the object that can be reached through the URI.
