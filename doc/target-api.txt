Target hierarchy
================

Service		org.neard
Interface	org.neard.Target
Object path	[variable prefix]/{nfc0}/{target0, target1...}

Method		dict GetProperties()

			Returns all properties for the device. See the
			properties section for available properties.

			Possible Errors: org.neard.Error.DoesNotExist

		void SetProperty(string name, variant value)

			Changes the value of the specified property. Only
			properties that are listed a read-write are changeable.
			On success this will emit a PropertyChanged signal.

			Possible Errors: org.neard.Error.DoesNotExist
					 org.neard.Error.InvalidArguments

		void AddRecord(dict attributes)

			Creates and add an NDEF record to the record array.

			The attribute argument should at least contain a
			record type and is described by the Record properties.
			For example, one would add a type, a Language, an
			Encoding and a Representation for a text record.

			Possible Errors: org.neard.Error.PermissionDenied
					 org.neard.Error.InvalidArguments

Signals		PropertyChanged(string name, variant value)

			This signal indicates a changed value of the given
			property.

Properties	string Type [readonly]

			The NFC target type.

			Valid types are "tag" and "device".

		array{string} Protocols [readonly]

			The target supported protocols.
			Possible values are "Felica", "MIFARE", "Jewel",
			"ISO-DEP" and "NFC-DEP".

		array{string} TagType [readonly]

			The tag type.
			Possible values are "Type 1", "Type 2", "Type 3",
			"Type 4" and "NFC-DEP"
			This is only valid for tag type targets.

		array{object} Records [readwrite]

			List of NDEF records object paths.
			This is only valid for tag type targets.

		boolean ReadOnly [readonly]

			Give the current status of tag's read mode
			This is valid for tag type and device targets


Record hierarchy
================

Service		org.neard
Interface	org.neard.Record
Object path	[variable prefix]/{nfc0}/{target0}/{record0,record1,...}

Method		dict GetProperties()

			Returns all properties for the record. Each record
                        has it's type and properties.

                        If type has "Text", possible properties are "Encoding",
                        "Language" and "Representation".

                        See the properties section for available properties.

			Possible Errors: org.neard.Error.DoesNotExist

Properties	string Type [readonly]

			The NDEF record type name.

			Possible values are "SmartPoster", "Text", "URI",
			"HandoverRequest", "HandoverSelect", "HandoverCarrier".

                string Encoding [readonly]

			The character encoding.

			Possible values are "UTF-8" or "UTF-16".
			This property is only valid for Text and SmartPoster's
			title records.

                string Language [readonly]

			The ISO/IANA language code (For example "en" or "jp").

			This property is only valid for Text and SmartPoster's
			title records.

                string Representation [readonly]

			The human readable representation of a text or
			title record.

			This property is only valid for Text and SmartPoster's
			title records.

		string URI [readonly]

			The record URI (for example https://nfc-forum.org).

			This is the complete URI, including the scheme and
			the resource.
			This property is only valid for SmartPoster's URI records.

		string MIMEType [readonly]

			The URI object MIME type.

			This is a description of the MIME type of the object
			the URI points at.
			This is not a mandatory field and is only valid for
			Smart Posters carrying a URI record.

		uint32 Size [readonly]

			The URI object size.

			This is the size of the object the URI points at.
			It should be used by applications to decide if they can
			afford to fetch the object or not.
			This is not a mandatory field and is only valid for
			Smart Posters carrying a URI record.

		string Action [readonly]

			The suggested course of action.

			This one is only valid for Smart Posters and is a
			suggestion only. It can be ignored, and the possible
			values are "Do" (for example launch the browser),
			"Save" (for example save the URI in the bookmarks folder,
			or "Edit" (for example open the URI in an URI editor for
			the user to modify it.
